;;;; event.lisp

(in-package #:event)

(defconstant +events-per-tick+ 3)
(defconstant +ticks-per-year+ 30000)

(defstruct context
  (tick 0)
  (self nil)
  (current-room nil)
  (event-stack nil)
  (status (make-hash-table))
  (objects nil)
  (entities nil))

(defun check-status (state symb)
  (gethash symb (context-status state)))

(defun current-room (state)
  (equal (map-room-index (context-current-room state)) '(0 0)))

;; Table format:
;; ('type-1 . (('property-1 . 'value-1)
;;             ('property-2 . 'value-2)
;;             ...))
;; ('type-2 . (('property-3 . ('effect . (('func-1 . (((parameters) . probability)
;;                                                    ...))
;;                                        ('func-2 . (((parameters) . probability)
;;                                                    ...))
;;                                        ...)))
;;             ...))


(defconstant +feelings+
  `((dread . ((excitement . "...")
              (condition . ((#'check-status . (((foreboding) . 0.1)
                                               ((silence) . 0.8)
                                               ((cold) . 0.3)
                                               ((death) . 0.6)
                                               ((grime) . 0.3)
                                               ((darkness) . 0.5)))
                            (#'not-initial-room . (nil . 0.3))))
              (effect . ((#'change-person . (((mood poor) . 0.9)
                                             ((concentration poor) . 0.1)))))))
    (foreboding . ((excitement . "...")
                   (condition . ((#'check-status . (((foreboding) . 0.7)
                                                    ((death) . 0.7)
                                                    ((grime) . 0.2)
                                                    ((darkness) . 0.4)))
                                 (#'not-initial-room . (nil . 0.3))))
                   (effect . ((#'change-person . (((mood poor) . 0.6)
                                                  ((concentration poor) . 0.7)))))))
    (ecstasy . ((excitement . "!!!")
                (condition . ((#'check-status . (((beauty) . 0.3)
                                                 ((warmth) . 0.7)
                                                 ((comfort) . 0.8)
                                                 ((life) . 0.8)
                                                 ((cleanliness) . 0.4)
                                                 ((light) . 0.4)))
                              (#'not-initial-room . (nil . 0.1))))
                (effect . ((#'change-person . (((mood good) . 1.0)
                                               ((concentration good) . 0.6)))))))
    (rage . ((excitement . "!")
             (condition . ((#'check-status . (((betrayal) . 0.8)
                                              ((hatred) . 0.4)
                                              ((conflict) . 0.3)
                                              ((war) . 0.3)))
                           (#'not-initial-room . (nil . 0.3))))
             (effect . ((#'change-person . (((mood poor) . 0.7)
                                            ((concentration poor) . 0.3)))))))
    (anger . ((excitement . "!")
              (condition . ((#'check-status . (((betrayal) . 0.9)
                                               ((hatred) . 0.5)
                                               ((conflict) . 0.5)
                                               ((war) . 0.3)))
                            (#'not-initial-room . (nil . 0.3))))
              (effect . ((#'change-person . (((mood poor) . 0.7)
                                             ((concentration poor) . 0.3)))))))
    (joy . ((excitement . "!")
            (condition . ((#'check-status . (((beauty) . 0.4)
                                             ((warmth) . 0.2)
                                             ((comfort) . 0.2)
                                             ((life) . 0.4)
                                             ((cleanliness) . 0.2)
                                             ((light) . 0.2)))
                          (#'not-initial-room . (nil . 0.3))))
            (effect . ((#'change-person . (((mood good) . 0.9)
                                           ((concentration good) . 0.7)))))))
    (fear . ((excitement . "!?")
             (condition . ((#'check-status . (((foreboding) . 0.4)
                                              ((death) . 0.9)
                                              ((grime) . 0.1)
                                              ((dark) . 0.7)))
                           (#'not-initial-room . (nil . 0.3))))
             (effect . ((#'change-person . (((mood poor) . 0.7)
                                            ((concentration poor) . 0.3)))))))
    (contentedness . ((excitement . ".")
                      (condition . ((#'check-status . (((beauty) . 0.8)
                                                       ((warmth) . 0.9)
                                                       ((comfort) . 0.8)
                                                       ((light) . 0.3)))
                                    (#'not-initial-room . (nil . 0.3))))
                      (effect . ((#'change-person . (((mood good) . 0.5)
                                                     ((concentration good) . 1.0)))))))))

(defconstant +status-effects+
  `((dizzy . ((excitement . "...")
              (condition . (lambda (x)))
              (effect . (lambda (x)))))
    (confused . ((excitement . "...?")
                 (condition . (lambda (x)))
                 (effect . (lambda (x)))))
    (strengthened . ((excitement . "!")
                     (condition . (lambda (x)))
                     (effect . (lambda (x)))))
    (empowered . ((excitement . "!")
                  (condition . (lambda (x)))
                  (effect . (lambda (x)))))
    (weakened . ((excitement . "...")
                 (condition . (lambda (x)))
                 (effect . (lambda (x)))))))

(defconstant +apparitions+
  `((goose . ((excitement . "!!!!!!!!!!!!!!!!!!")
              (origin . (lambda (x)))
              (condition . (lambda (x)))
              (effect . (lambda (x)))))
    (stork . ((excitement . "...?")
              (origin . (lambda (x)))
              (condition . (lambda (x)))
              (effect . (lambda (x)))))
    (wisp . ((excitement . "...")
             (origin . (lambda (x)))
             (condition . (lambda (x)))
             (effect . (lambda (x)))))))

(defmacro generate-variants (constants)
  (map 'list #'car constants))

;;; Table and constant definition
(defconstant +event-classes+
  `((feeling . ((name . "A feeling of ~A falls upon you~A")
                (parameters . (name excitement))
                (variants . ,+feelings+)))
    (status-effect . ((name . "You feel ~A~A")
                      (parameters . (name excitement))
                      (variants . ,+status-effects+)))
    (apparation . ((name . "A ~A appeared~A")
                   (parameters . (name excitement))
                   (variants . ,+apparitions+)))
    (luck . ((name . "Somehow you feel vaguely optimistic, like something might go well...")))
    (unluck . ((name . "You feel vaguely pessimistic. You feel worried that something will go poorly...")))))

(defmacro generate-event-from-class (event-classes const-name)
  `(defconstant ,const-name
     (apply #'concatenate 'list
            (map 'list
                 (lambda (event-class)
                   (let ((variants (cdr (assoc 'variants (cdr event-class))))
                         (name (cdr (assoc 'name (cdr event-class))))
                         (parameters (cdr (assoc 'parameters (cdr event-class)))))
                     (map 'list
                          (lambda (variant)
                            `(,(car variant) . ((name . ,(apply #'format nil name
                                                                (map 'list
                                                                     (lambda (key)
                                                                       (if (and (eql key 'name) (not (assoc 'name (cdr variant))))
                                                                           (string-downcase (string (car variant)))
                                                                           (cdr (assoc key (cdr variant)))))
                                                                     parameters)))
                                                ,(assoc 'condition (cdr variant))
                                                ,(assoc 'effect (cdr variant)))))
                          variants)))
                 ,event-classes))))

(generate-event-from-class +event-classes+ events)

;;; Top-Level functions
(defun simulate-events (state event-table)
  "Simulate a given number of events based on the current game state"
  (dotimes (i +events-per-tick+)
    (dolist (event event-table) (evaluate-event state event))))

(defun evaluate-conditions (state event)
  (- 1 (reduce #'*
               (map 'list
                    (lambda (situation)
                      (- 1 (evaluate-probability state situation)))
                    (cdr (assoc 'condition (cdr event)))))))

(defun evaluate-probability (state probability-list)
  "Compute the probability of an event taking place"
  (let ((probability-function (car probability-list))
        (situations (cdr probability-list)))
    (- 1 (reduce #'*
                 (map 'list
                      (lambda (situation)
                        (if (apply probability-function state (car situation))
                            (- 1 (cdr situation))
                            1))
                      situations)))))

(defun evaluate-event (state event)
  "Sum the probability of an event happening and if so, execute the event"
  (let ((prob (evaluate-conditions state event)))
    (when (<= (random 1.0) prob)
      (simulate-event state event))))

(defun simulate-effect (state effect)
  (let ((effect-function (car effect))
        (situations (cdr effect)))
    (dolist (situation situations)
      (let ((probability (cdr situation))
            (parameters (car situation)))
        (if (<= probability (random 1.0))
            (apply effect-function state parameters))))))

(defun simulate-effects (state event)
  (let ((effects (cdr (assoc 'effect event))))
    (dolist (effect effects)
      (simulate-effect state effect))))

(defun simulate-event (state event)
  "Run an event unconditionally"
  (format t "In the year ~a:" (floor (/ (context-tick state) +ticks-per-year+)))
  (format t "~S\n~S" (cdr (assoc 'name event)) (cdr (assoc 'description event)))
  (simulate-effects state event))
